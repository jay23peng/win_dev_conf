#+STARTUP: overview
#+OPTIONS: \n:t
# Note: Above OPTION is not working on site like github
* MacOS (Catalina)
** System
   - basic setup like keyboard, click, mouse...
   - Use [[https://colemak.com/][Colemak]] for keyboard layout
*** Change Machine Name
    #+begin_src 
    sudo scutil --set ComputerName "newname"
    sudo scutil --set LocalHostName "newname"
    sudo scutil --set HostName "newname"
    #+end_src
*** Modifier Key Remap
   MacOS uses ~Cmd~ key as ~Ctrl~ on windows/linux. Also vscode follows the same practice that use ~Cmd~ to replace ~Ctrl~ as main function key on Mac. Based on that, the approach we can take:
   - Swap ~Capslock~ with ~Cmd~ instead of using ~Ctrl~ on windows/linux.
   - Pick a terminal that can swap ~cmd~ and ~Ctrl~ so that all the terminal based tools can still use the same physical ~Capslock~ as main function key.
   The tradeoff is some GUI software which rely on ~Ctrl~ will be different with the major MacOS software practice. Mostly those software are 'legacy' tool like vim and emacs, and we can use terminal version.
   #+begin_src
    Capslock => Cmd
    Ctrl     => Capslock
    Cmd      => Ctrl
   #+end_src
*** Modifer Key Definition Principle
    - Disable the unused shortcut as much as possible
    - Use vi mode + leader key if possible
    - Remove unused shortcut as much as possible
   #+begin_src
    Cmd        => System preserved like copy/paste
    Ctrl       => System shortcut (physical Cmd button)
    Ctrl + Cmd => GUI App include terminal
    Ctrl       => CUI App, (pyhsical Ctrl button remapped by terminal)
        (Try to use the combination not coverd by 'Cmd' at GUI layer)
    #+end_src
*** System Shortcut
   #+begin_src
    Ctrl + Left/Right        => Tile window to left/right screen
      - on Mac it needs divvy support
      - on Linux i3wm has similar layout
    Ctrl + Up                => Maximize window
    Ctrl + Down              => Show Tile management menu
    Ctrl + Space             => Input method
    Ctrl + s                 => Screen Snapshot
    Ctrl + q                 => Quick app menu
    Ctrl + Cmd + Up          => Show desktop/workspace manager
    Ctrl + Cmd + Left/Right => Switch desktop/workspace
   #+end_src

*** Mac Wallpaper Path
    #+begin_src 
    /System/Library/Desktop Pictures
    #+end_src
*** Misc Utilities
    - [[https://qspace.awehunt.com/en-us/index.html][qspace]]
    - [[https://github.com/mstarke/MacPass][mappass]]
    - [[https://github.com/sbmpost/AutoRaise][AutoRaise]]
    - [[http://kdiff3.sourceforge.net/][kdiff3]]
    - [[https://github.com/ianyh/Amethyst][ametheyst]]
** Browser
   [[https://vivaldi.com][vivaldi]] is a browser that:
   - chrome based, compatible with moset of the site
   - vertical tab and tab group supported, basic tree-style-tab functionality
   - works fine with vi key bindng using [[https://github.com/brookhong/Surfingkeys][Surfingkeys]].
   - Setup sync.
*** Set shortcut at system level
    Sometimes shortcut like ~Cmd+Shift+r~ cannot be overwritten at app level. In that case:
    - Put ~Untile Tabs~ to menu in app preference.
    - Add specific command to menu (like vivaldi/Untile Tabs, if the app doesn't support that and the function u need is not on menu)
    - Go to System Preference/Keyboard.
    - GO to Shortcuts/App Shortcuts
    - Add your app and the menu name you want to overwrite (~Untile Tabs~), give a new value.
*** browser hack
    - Login and sync setting back
    - https://forum.vivaldi.net/topic/10549/modding-vivaldi
    - Then point to ~dev/general/vivaldi~ to resolve the active tab issue
*** browser theme
    Vivladi supports cuctomize theme color directly in system preference
*** Midnight Lizard
    - Set toggle shortcut at menu ~Vivladi/preference/extensions/shortcut~.
    - Midnight Lizard suppots customize based on color code. For One Dark:
      #+begin_src
      Background: #282C34
      Button:     #E5C07B
      Text:       #ABB2BF    #405163
      Link:       #61AFEF    #C678DD
      Border:     #E5C07B
      Scrollbar:  #405163
      #+end_src
      Save it as ~One Dark~ and set it as default. Note that it is based on a hue theroy and cannot be 100% same to origin theme design.
*** Browser shortcut
    Try to use browser shortcut as much as possible then go to Surfingkeys
    #+begin_src
    # cmd
    Cmd + b          => toggle side bar
    Cmd + Shift + p  => quick command
    Cmd + Ctrl  + m  => Switch dark/light mode on current page (Midnight Lizard)
    Cmd + r          => history forward ('Ctrl+r', need to set it in browser not Surfingkeys)
    # split command  => quick command with 'tile'
    #+end_src
*** Surfingkeys
    After install extension, load the config from ~dex/config/opt/surfingkeys~
** VSCode
   - All you need to to is install and sync.
*** VSCode Vim Mode
   vs code vim mode require separate mapping to map ~Cmd~ to ~Ctrl~:
    #+begin_src json
    {
      {
          "key": "cmd+r",
          "command": "extension.vim_ctrl+r",
          "when": "editorTextFocus && vim.active && vim.use<C-r> && !inDebugRepl"
  	  },
      {
          "key": "cmd+[",
          "command": "extension.vim_ctrl+[",
          "when": "editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl"
  	  },
      {
          "key": "cmd+w",
          "command": "extension.vim_ctrl+w",
          "when": "editorTextFocus && vim.active && vim.use<C-w> && !inDebugRepl"
  	  },
      {
          "key": "cmd+u",
          "command": "extension.vim_ctrl+u",
          "when": "editorTextFocus && vim.active && vim.use<C-u> && !inDebugRepl"
  	  },
      {
          "key": "cmd+d",
          "command": "extension.vim_ctrl+d",
          "when": "editorTextFocus && vim.active && vim.use<C-d> && !inDebugRepl"
  	  },
      {
          "key": "ctrl+[",
          "command": "-extension.vim_ctrl+[",
          "when": "editorTextFocus && vim.active && vim.use<C-[> && !inDebugRepl"
      },
      {}
    }
    #+end_src
*** VSCode Terminal
    We can follow this [[https://github.com/xtermjs/xterm.js/blob/0e45909c7e79c83452493d2cd46d99c0a0bb585f/src/common/data/EscapeSequences.ts][Esacpe Sequence List]] to mimic Linux Terminal behavior:
    #+begin_src json
    {
    	{
    		"key": "shift+cmd+c",
    		"command": "workbench.action.terminal.copySelection",
    		"when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    	},
    	{
    		"key": "shift+cmd+v",
    		"command": "workbench.action.terminal.paste",
    		"when": "terminalFocus && terminalProcessSupported"
    	},
    	{
    		"key": "shift+ctrl+c",
    		"command": "workbench.action.terminal.copySelection",
    		"when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    	},
    	{
    		"key": "shift+ctrl+v",
    		"command": "workbench.action.terminal.paste",
    		"when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+c",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u0003" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+a",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u0001" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+e",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u0005" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+w",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u0017" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+k",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u000b" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+u",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u0015" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+y",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u0019" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+r",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u0012" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+[",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u001b" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
      {
            "key": "cmd+d",
            "command": "workbench.action.terminal.sendSequence",
            "args": { "text": "\u0004" },
            "when": "terminalFocus && terminalProcessSupported"
    	},
    }
    #+end_src
** HomeBrew
  Mac Setup start from install home brew:
  #+begin_src sh
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  #+end_src
  Common homebrew command:
  #+begin_src sh
    brew list
    brew cask list
    brew install <package>
    brew uninstall <package>
  #+end_src
** Fonts
  [[https://github.com/ryanoasis/nerd-fonts][nerd-fonts]] is required in the toolchain, for now use approach 3 to install it:
  #+begin_src sh
    brew tap homebrew/cask-fonts
    brew install --cask font-fira-mono-nerd-font
  #+end_src
** alacritty
    - yes ~brew install alacritty~
    - link config:
   #+begin_src
     ln -s ~/u/dex/config/opt/alacritty ~/.config/alacritty
   #+end_src
*** Terminal Shortcut
   - Different with iTerm2, there is almost no terminal level function so no short cut needed
** iTerm2
   - Install it through ~brew install item2~.
     - iterm2 provide options to map the Ctrl and Cmd back so that vim and emacs still get the correct key mapping. But for other short cut like Ctrl+t, Ctrl+q, they needs to be tuned correctly for no clash.
     - If u have saved the configuration in git repo u can just load it in iTerm2 preference directly. (~iTerm2->Preference->Load Preferences from a custom folder or URL~)
     - Get iterm2 colors in below (if needed):
       https://github.com/mbadolato/iTerm2-Color-Schemes
*** Terminal Shortcut
   #+begin_src
    Ctrl + Shift + c => Copy
    Ctrl + Shift + v => Paste
    Ctrl + Cmd + t => new tab
    Ctrl + Cmd + ' => split on right
    Ctrl + Cmd + - => split on bottom
    Ctrl + Cmd + n => move current window to new tab
   #+end_src
** Vim
   - For ~vim~, install MacVim through homebrew:
     #+begin_src sh
       brew install macvim
     #+end_src
   - [[https://github.com/junegunn/vim-plug][vim-plug]] is required:
     #+begin_src sh
       curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
           https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
     #+end_src
     after that link the .vimrc to ~~/~ then run ~PlugInstall~ in vim.
     #+begin_src sh
     ln -s ~/u/dex/config/opt/vim/.vimrc ~/.vimrc
     #+end_src
   - VIM has ~VimOrganizer~ for org-mode already but it is abandened. For basic usage it is suffcient
** Use touch id in sudo
   - ~sudo vim /etc/pam.d/sudo~ then add line below:
     #+begin_src sh
       auth sufficient pam_tid.so
     #+end_src
   - Go to Prefs -> Advanced -> Allow sessions to survive logging out and back in and set value to no.
** ThinkPad Compact Bluetooth Keyboard
   - Ues ~karabiner-elements~ to skip mouse-3:
     #+begin_src sh
       brew install karabiner-elements
     #+end_src
     Then map ~button-3~ to ~button32~. 
   - Use [[https://pilotmoon.com/scrollreverser/][Scroll Reverser]] to differenciate the scroll direction for trackpoint.
   - Change trackpoint speed by command below: (since it exceed the max UI value)
     #+begin_src sh
       defaults write -g com.apple.mouse.scaling  20.0
     #+end_src
** Envrionment Variable
   #+begin_src sh
   # /etc/profile -> add below at the buttom
   export DOCKER_HOST=tcp://localhost:2375
   export FZF_DEFAULT_COMMAND='fd -a -j 4'
   #+end_src
** Add $PATH
  #+begin_src sh
    # vim /etc/path.d/dev.public <-- any name should be OK
    /Users/jesse23/u/dex/bin
    /Users/jesse23/u/dex/config/mac/bin
    /Users/jesse23/.emacs.d/bin
  #+end_src
** Fish shell
   #+begin_src sh
     brew install fish
     # sudo vim /etc/shells
     # add /usr/local/bin/fish to it
     chsh -s /usr/local/bin/fish
   #+end_src
*** monokai theme
    clone the [[https://github.com/benmarten/Monokai_Fish_OSX][repo]] and run ~fish set_colors.fish~.
*** omf
    #+begin_src sh
      # install omf
      curl -L https://get.oh-my.fish | fish
      omf install bobthefish

      # bobthefish monokai
      # https://github.com/oh-my-fish/theme-bobthefish/wiki/Base16-Monokai-custom-color-scheme      

      # .config/fish/config.fish
      # set -g theme_color_scheme gruvbox
      # set -g -x DOCKER_HOST tcp://localhost:2375
      # set -g -x FZF_DEFAULT_COMMAND='fd -a -j 4'
      test -e {$HOME}/.iterm2_shell_integration.fish ; and source {$HOME}/.iterm2_shell_integration.fish ; or true
      
      # setup git
      omf install https://github.com/jhillyerd/plugin-git
      git config --global user.email "jsp23@qq.com"
      git config --global user.name "jesse23"
      git config --global core.editor vim
      git config --global credential.helper store

      # nvm
      omf install https://github.com/jorgebucaran/fish-nvm
      # need to restart fish shell or maybe install nvm separately
      nvm use lts
    #+end_src

*** k8s support
    https://ieevee.com/tech/2018/12/17/fish-kubectl-completions.html
** Cli Utils
*** Fzf
    #+begin_src sh 
    brew install fd fzf
    #+end_src
    Then add setting below to bash config:
    #+begin_src sh
    # export FZF_DEFAULT_COMMAND='fd -a -j 4'
    set -g -x FZF_DEFAULT_COMMAND='fd -a -j 4'
    #+end_src
*** Ripgrep
    #+begin_src
    brew install rg
    #+end_src
*** Exa
    #+begin_src
    brew install exa
    #+end_src
    Then add it to alias:
    #+begin_src
    alias ls="exa"
    #+end_src
*** fnm
    [[https://github.com/Schniz/fnm][fnm]] is a nodejs manager compatible with fish shell
    #+begin_src 
    curl -fsSL https://fnm.vercel.app/install | bash
    #+end_src
    Add alias:
     #+begin_src
    alias nvm="fnm"
    #+end_src
** Emacs (doom emacs)
   - Install core dependency
   #+begin_src sh
   brew install git ripgrep coreutils fd
   xcode-select --install
   #+end_src
   - Install emacs-plus 
   #+begin_src sh
   brew tap d12frosted/emacs-plus
   # 20201228 - @28.0.50
   # https://github.com/d12frosted/homebrew-emacs-plus
   brew install emacs-plus@28 --with-native-comp --with-xwidgets --with-modern-black-variant-icon --with-ctags --with-mailutils
   ln -s /usr/local/opt/emacs-plus@28/Emacs.app /Applications/Emacs.app
   #+end_src
   - Install [[https://github.com/hlissner/doom-emacs][DOOM Emacs]]:
   #+begin_src sh
   git clone --depth 1 https://github.com/hlissner/doom-emacs ~/.emacs.d
   ~/.emacs.d/bin/doom install
   # remove the default config
   rm -rf ~/.doom.d
   # link customize config
   ln -s ~/u/dex/config/opt/doom ~/.config/doom
   # add ~/.emacs.d/bin to $PATH
   #+end_src
*** still showing star when open org file in cmd line directly
    Seems a bug, rerun ~:org-mode~ to reload can fix the issue.
** Docker
*** Docker Server
    Docker Server has mutiple approaches:
    - Virtualization (Parallel Desktop, VMWare Fusion, VirtualBox)
      - PD has best performance, VBox is free.
    - Native Docker OSX (OOTB Apple Virtualization Solution)
    
    Approach below is based on [[https://www.vagrantup.com/][Vagrant]] with VBox, should work for PD and VMWare too.
    #+begin_src sh
    # Install VirtualBox
    brew install virtualbox
    # Install Vagrant
    brew install vagrant
    brew install vagrant vagrant-manager
    # looks vagrant has issue to handle VAGRANT_VAGRANTFILE, need to investigate. For now use cd
    # export VAGRANT_VAGRANTFILE=~/u/dex/opt/vagrant/dockervm/Vagrantfile
    cd ~/u/dex/opt/vagrant/dockervm
    vagrant up
    #+end_src

    Set DOCKER_HOST correctly in your master machine rc file:
    #+begin_src sh
    # export DOCKER_HOST=tcp://0.0.0.0:2375
    set -g -x DOCKER_HOST tcp://localhost:2375
    #+end_src

    - If u want to build it manually , refer to the configuration inside the Vagrantfile.
    - If u need to expose/bind extra ports, do it by modifying Vagrantfile directly and then provision in Vagrant.

    - If any exception happens, remove vm and space from vbox directly the run:
    #+begin_src sh
    vagrant global-status --prune
    #+end_src
*** Docker Client
    - Install it by following:
      https://docs.docker.com/engine/install/binaries/#install-client-binaries-on-macos
    - Dcokerhub has an anonymous limitaion from Nov 2020, run ~docker login~ with valid account if hits the limit. 
*** Docker Compose
    #+begin_src sh
    brew install docker-compose
    #+end_src
*** Docker bootstrap test
    #+begin_src sh
    docker run --rm hello-world
    #+end_src
** Kubenates
   [[https://k3d.io][k3d]] is a light-weight kubernates setup based on docker.
*** Installation
    #+begin_src sh
    # docker must be installed as prerequresite
    brew install k3d kubectl
    #+end_src
*** k3d bootstrap test
    #+begin_src sh
    # setup - use 30080 as exposd node port
    k3d cluster create mycluster -p "8082:30080@server[0]"
    # get cluster port (different for every cluster create), usually will be the https://0.0.0.0:5xxxx
    kubectl config view | grep server
    # modify server to dockervm.local if the docker setup is insde vm.
    # Or u can use vagrant port map to map the port to your master machine.
    kubectl config set-cluster k3d-mycluster --server=https://dockervm.local:5xxxx

    # test
    kubectl create deployment nginx --image=nginx
    kubectl create service nodeport nginx --node-port=30080 --tcp=80
    # pod:80 => cluster:30080 => docker_host:8082
    curl http://dockervm.local:8082
    kubectl delete service/nginx

    # another test ( optional )
    kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1
    kubectl create service nodeport kubernetes-bootcamp --node-port=30080 --tcp=8080
    # pod:8080 => cluster:30080 => docker_host:8082
    curl http://dockervm.local:8082
    kubectl delete service/kubernetes-bootcamp

    # clean up
    k3d cluster delete mycluster
    #+end_src
** Tmux
- install:
  #+begin_src sh
  brew install tmux
  ln -s ~/u/dex/config/opt/tmux/.tmux.conf ~/.tmux.conf
  ln -s ~/u/dex/config/opt/tmux/.tmux.conf.local ~/.tmux.conf.local
  #+end_src
*** Customize short cut:
  #+begin_src
  C-b ' Split vertically (left-right)
  C-b - Split Horizontally (top-down)
  C-b n Split Horizontally (top-down)
  C-b z Maximize current split pane (toggle on/off)
  #+end_src

** Windows VM
   No requirement for now. If needed, can try to use boxes on [[https://app.vagrantup.com/boxes/search?order=desc&page=1&provider=&q=windows&sort=created&utf8=%E2%9C%93][Vagrant Cloud]], or build from scratch based on underlying vm software.
*** Key Mapping
    Ues [[https://chocolatey.org/packages/keytweak][KeyTweak]] for:
    - Colemak keyboard for windows.
    - Modifer key remap as below: (since we mapped it on mac layer)
      #+begin_src
      LControl => LWindows
      LWindows => LControl
      #+end_src
** Special note for OneDrive
   If u are using default APFS disk format u can ignore this.
   OneDrive on MAC is not compatible with case sensitive partition. An extra partition is needed through `Disk Utility` for using oneDrive if your main drive is case sensitive APFS.
** Theme
  |                 | gruvbox-dark-hard                 | monokai                     | one-dark                  |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | Chrome          | [[https://chrome.google.com/webstore/detail/gruvbox-theme/ihennfdbghdiflogeancnalflhgmanop?hl=en-GB][gruvbox theme]]                     | [[https://chrome.google.com/webstore/detail/material-simple-dark-grey/ookepigabmicjpgfnmncjiplegcacdbm][Material Simple Dark Grey]]   | [[https://chrome.google.com/webstore/detail/atom-one-dark-theme/obfjhhknlilnfgfakanjeimidgocmkim][Atom One Dark Theme]]       |
  |                 | [[https://chrome.google.com/webstore/detail/devtools-theme-gruvbox-da/njcgdakjdifgccdgnoiphpnihcfopcmj][DevTools Theme: Gruvbox Dark]]      | [[https://chrome.google.com/webstore/detail/monokai-for-chrome/ebanajomahnlhgbljngocmccmpelnaam][Monokai for chrome]]          | [[https://github.com/jesse23/config/tree/master/opt/chrome/one-dark-devtools][Atom One Dark]]             |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | Vivaldi         | Customize in prefernce            | Customize in prefernce      | Customize in prefernce    |
  |                 | [[https://chrome.google.com/webstore/detail/devtools-theme-gruvbox-da/njcgdakjdifgccdgnoiphpnihcfopcmj][DevTools Theme: Gruvbox Dark]]      | [[https://chrome.google.com/webstore/detail/monokai-for-chrome/ebanajomahnlhgbljngocmccmpelnaam][Monokai for chrome]]          | [[https://github.com/jesse23/config/tree/master/opt/chrome/one-dark-devtools][Atom One Dark]]             |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | Midnight Lizard | Customize in extension            | Customize in extension      | Customize in extension    |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | Slack           | Customize in prefernce            | Customize in prefernce      | [[https://slackthemes.net/#/aubergine][One Dark]]                  |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | VSCode          | [[https://marketplace.visualstudio.com/items?itemName=tomphilbin.gruvbox-themes][Gruvbox Dark Hard]]                 | [[https://marketplace.visualstudio.com/items?itemName=fabiospampinato.vscode-monokai-night][Monokai-Night-Theme/Monokai]] | [[https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme][One Dark Pro]]              |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | iTerm2          | [[https://github.com/mbadolato/iTerm2-Color-Schemes][Gruvbox]]                           | [[https://github.com/mbadolato/iTerm2-Color-Schemes][Monokai]]                     | [[https://github.com/mbadolato/iTerm2-Color-Schemes][DoomOne]]                   |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | Alacritty       | [[https://github.com/mbadolato/iTerm2-Color-Schemes][Gruvbox]]                           | [[https://github.com/mbadolato/iTerm2-Color-Schemes][Monokai]]                     | [[https://github.com/eendroroy/alacritty-theme][eendroroy/alacritty-theme]] |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | Fish Shell      | fish_config                       | [[https://github.com/benmarten/Monokai_Fish_OSX][Monokai]]                     | [[https://github.com/rkbk60/onedark-fish][rkbk60/onedark-fish]]       |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | bobthefish      | [[https://github.com/oh-my-fish/theme-bobthefish][theme-bobthefish]]                  | [[https://github.com/oh-my-fish/theme-bobthefish/wiki/Base16-Monokai-custom-color-scheme][bobthefish-monokai]]          | [[https://github.com/oh-my-fish/theme-bobthefish/wiki/Custom-color-schemes][bobthefish_colors.fish]]    |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | vim             | [[https://github.com/morhetz/gruvbox][morhetz/gruvbox]]                   | [[https://github.com/tomasr/molokai][tomasr/molokai]]              | [[https://github.com/romgrk/doom-one.vim][romgrk/doom-one.vim]]       |
  |                 | [[https://github.com/itchyny/lightline.vim/blob/master/colorscheme.md#jellybeans][lightline/jellybeans]]              | [[https://github.com/itchyny/lightline.vim/blob/master/colorscheme.md#molokai][lightline/molokai]]           | [[https://github.com/itchyny/lightline.vim/blob/master/colorscheme.md#molokai][lightline/srcery_drk]]      |
  |-----------------+-----------------------------------+-----------------------------+---------------------------|
  | emacs           | [[https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Bthemes/themes-megapack][themes-meagpack/gruvbox-dark-hard]] | [[https://github.com/syl20bnr/spacemacs/tree/master/layers/%2Bthemes/themes-megapack][themes-megapack/monokai]]     | [[https://github.com/hlissner/emacs-doom-themes][doom-one]]                  |

* Github org mode support
  - https://github.com/fniessen/refcard-org-mode
  - https://github.com/novoid/github-orgmode-tests/blob/master/README.org
* Reference
[[file:./doc/universal_shortcut.org][Universal Shortcut]]
